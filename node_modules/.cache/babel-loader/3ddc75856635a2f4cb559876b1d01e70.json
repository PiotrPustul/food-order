{"ast":null,"code":"var _jsxFileName = \"/Users/pepe/Desktop/Food order app/food-order/src/components/Cart/Checkout.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react';\nimport classes from './Checkout.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isSevenChars = value => value.trim().length === 7;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputsValidity, setFormInputsValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const enteredName = nameInputRef.current.value;\n    const enteredStreet = streetInputRef.current.value;\n    const enteredPostCode = postCodeInputRef.current.value;\n    const enteredCity = cityInputRef.current.value;\n    const enteredNameIsValid = !isEmpty(enteredName);\n    const enteredStreetIsValid = !isEmpty(enteredStreet);\n    const enteredCityIsValid = !isEmpty(enteredCity);\n    const enteredPostCodeIsValid = isSevenChars(enteredPostCode);\n    setFormInputsValidity({\n      name: enteredNameIsValid,\n      street: enteredStreetIsValid,\n      city: enteredCityIsValid,\n      postCode: enteredPostCodeIsValid\n    });\n    const formIsValid = enteredNameIsValid && enteredStreetIsValid && enteredCityIsValid && enteredPostCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: enteredName.toUpperCase(),\n      street: enteredStreet.toUpperCase(),\n      city: enteredCity.toUpperCase(),\n      postCode: enteredPostCode.toUpperCase()\n    });\n  };\n\n  const nameControlClasses = `${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`;\n  const streetControlClasses = `${classes.control} ${formInputsValidity.street ? '' : classes.invalid}`;\n  const postCodeControlClasses = `${classes.control} ${formInputsValidity.postCode ? '' : classes.invalid}`;\n  const cityControlClasses = `${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`;\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), !formInputsValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: streetControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this), !formInputsValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: postCodeControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"post\",\n        children: \"Post code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"post\",\n        ref: postCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this), !formInputsValidity.postCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid post code! (7 chars)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 46\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cityControlClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), !formInputsValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 42\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.actions,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onHoldOrder,\n        children: \"Hold order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Checkout, \"9w0Qbnq3HBSwzgpkt02LDPIg5go=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["/Users/pepe/Desktop/Food order app/food-order/src/components/Cart/Checkout.js"],"names":["useRef","useState","classes","isEmpty","value","trim","isSevenChars","length","Checkout","props","formInputsValidity","setFormInputsValidity","name","street","city","postCode","nameInputRef","streetInputRef","postCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","enteredName","current","enteredStreet","enteredPostCode","enteredCity","enteredNameIsValid","enteredStreetIsValid","enteredCityIsValid","enteredPostCodeIsValid","formIsValid","onConfirm","toUpperCase","nameControlClasses","control","invalid","streetControlClasses","postCodeControlClasses","cityControlClasses","form","actions","submit","onHoldOrder"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\n\nimport classes from './Checkout.module.css';\n\nconst isEmpty = value => value.trim() === '';\nconst isSevenChars = value => value.trim().length === 7;\n\nconst Checkout = (props) => {\n   const [formInputsValidity, setFormInputsValidity] = useState({\n      name: true,\n      street: true,\n      city: true,\n      postCode: true\n   });\n\n   const nameInputRef = useRef();\n   const streetInputRef = useRef();\n   const postCodeInputRef = useRef();\n   const cityInputRef = useRef();\n\n   const confirmHandler = (event) => {\n      event.preventDefault();\n\n      const enteredName = nameInputRef.current.value;\n      const enteredStreet = streetInputRef.current.value;\n      const enteredPostCode = postCodeInputRef.current.value;\n      const enteredCity = cityInputRef.current.value;\n\n      const enteredNameIsValid = !isEmpty(enteredName);\n      const enteredStreetIsValid = !isEmpty(enteredStreet);\n      const enteredCityIsValid = !isEmpty(enteredCity);\n      const enteredPostCodeIsValid = isSevenChars(enteredPostCode);\n\n      setFormInputsValidity({\n         name: enteredNameIsValid,\n         street: enteredStreetIsValid,\n         city: enteredCityIsValid,\n         postCode: enteredPostCodeIsValid\n      });\n\n      const formIsValid =\n         enteredNameIsValid &&\n         enteredStreetIsValid &&\n         enteredCityIsValid &&\n         enteredPostCodeIsValid\n\n      if (!formIsValid) {\n         return;\n      }\n\n      props.onConfirm({\n         name: enteredName.toUpperCase(),\n         street: enteredStreet.toUpperCase(),\n         city: enteredCity.toUpperCase(),\n         postCode: enteredPostCode.toUpperCase(),\n      });\n   };\n\n   const nameControlClasses = `${classes.control} ${formInputsValidity.name ? '' : classes.invalid}`;\n   const streetControlClasses = `${classes.control} ${formInputsValidity.street ? '' : classes.invalid}`;\n   const postCodeControlClasses = `${classes.control} ${formInputsValidity.postCode ? '' : classes.invalid}`;\n   const cityControlClasses = `${classes.control} ${formInputsValidity.city ? '' : classes.invalid}`;\n\n   return (\n      <form className={classes.form} onSubmit={confirmHandler}>\n         <div className={nameControlClasses}>\n            <label htmlFor=\"name\">Your Name</label>\n            <input type=\"text\" id=\"name\" ref={nameInputRef} />\n            {!formInputsValidity.name && <p>Please enter a valid name!</p>}\n         </div>\n         <div className={streetControlClasses}>\n            <label htmlFor=\"street\">Street</label>\n            <input type=\"text\" id=\"street\" ref={streetInputRef} />\n            {!formInputsValidity.street && <p>Please enter a valid street!</p>}\n         </div>\n         <div className={postCodeControlClasses}>\n            <label htmlFor=\"post\">Post code</label>\n            <input type=\"text\" id=\"post\" ref={postCodeInputRef} />\n            {!formInputsValidity.postCode && <p>Please enter a valid post code! (7 chars)</p>}\n         </div>\n         <div className={cityControlClasses}>\n            <label htmlFor=\"city\">City</label>\n            <input type=\"text\" id=\"city\" ref={cityInputRef} />\n            {!formInputsValidity.city && <p>Please enter a valid city!</p>}\n         </div>\n         <div className={classes.actions}>\n            <button className={classes.submit}>Confirm</button>\n            <button type=\"button\" onClick={props.onHoldOrder}>Hold order</button>\n         </div>\n      </form>\n   );\n};\n\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}